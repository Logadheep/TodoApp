{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useConst } from '@fluentui/react-hooks';\nimport { KeyCodes } from '../../Utilities';\nimport { TimeConstants, addMinutes, formatTimeString, ceilMinuteToIncrement, getDateFromTimeSelection } from '@fluentui/date-time-utilities';\nimport { ComboBox } from '../../ComboBox';\nvar REGEX_SHOW_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):([0-5][0-9]):([0-5][0-9])\\s([AaPp][Mm]))$/;\nvar REGEX_HIDE_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):[0-5][0-9]\\s([AaPp][Mm]))$/;\nvar REGEX_SHOW_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/;\nvar REGEX_HIDE_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\nvar TIME_LOWER_BOUND = 0;\nvar TIME_UPPER_BOUND = 23;\nvar getDefaultStrings = function (useHour12, showSeconds) {\n  var hourUnits = useHour12 ? '12-hour' : '24-hour';\n  var timeFormat = \"hh:mm\" + (showSeconds ? ':ss' : '') + (useHour12 ? ' AP' : '');\n  var errorMessageToDisplay = \"Enter a valid time in the \" + hourUnits + \" format: \" + timeFormat;\n  return {\n    invalidInputErrorMessage: errorMessageToDisplay\n  };\n};\n/**\n * {@docCategory TimePicker}\n */\nexport var TimePicker = function (_a) {\n  var label = _a.label,\n    _b = _a.increments,\n    increments = _b === void 0 ? 30 : _b,\n    _c = _a.showSeconds,\n    showSeconds = _c === void 0 ? false : _c,\n    _d = _a.allowFreeform,\n    allowFreeform = _d === void 0 ? true : _d,\n    _e = _a.useHour12,\n    useHour12 = _e === void 0 ? false : _e,\n    timeRange = _a.timeRange,\n    _f = _a.strings,\n    strings = _f === void 0 ? getDefaultStrings(useHour12, showSeconds) : _f,\n    defaultValue = _a.defaultValue,\n    onChange = _a.onChange,\n    onFormatDate = _a.onFormatDate,\n    onValidateUserInput = _a.onValidateUserInput,\n    rest = __rest(_a, [\"label\", \"increments\", \"showSeconds\", \"allowFreeform\", \"useHour12\", \"timeRange\", \"strings\", \"defaultValue\", \"onChange\", \"onFormatDate\", \"onValidateUserInput\"]);\n  var _g = React.useState(''),\n    userText = _g[0],\n    setUserText = _g[1];\n  var _h = React.useState(''),\n    errorMessage = _h[0],\n    setErrorMessage = _h[1];\n  var optionsCount = getDropdownOptionsCount(increments, timeRange);\n  var initialValue = useConst(defaultValue || new Date());\n  var baseDate = React.useMemo(function () {\n    return generateBaseDate(increments, timeRange, initialValue);\n  }, [increments, timeRange, initialValue]);\n  var timePickerOptions = React.useMemo(function () {\n    var optionsList = Array(optionsCount);\n    for (var i = 0; i < optionsCount; i++) {\n      optionsList[i] = 0;\n    }\n    return optionsList.map(function (_, index) {\n      var option = addMinutes(baseDate, increments * index);\n      option.setSeconds(0);\n      var optionText = onFormatDate ? onFormatDate(option) : formatTimeString(option, showSeconds, useHour12);\n      return {\n        key: optionText,\n        text: optionText\n      };\n    });\n  }, [baseDate, increments, optionsCount, showSeconds, onFormatDate, useHour12]);\n  var _j = React.useState(timePickerOptions[0].key),\n    selectedKey = _j[0],\n    setSelectedKey = _j[1];\n  var onInputChange = React.useCallback(function (event, option, index, value) {\n    var validateUserInput = function (userInput) {\n      var errorMessageToDisplay = '';\n      var regex;\n      if (useHour12) {\n        regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_12 : REGEX_HIDE_SECONDS_HOUR_12;\n      } else {\n        regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_24 : REGEX_HIDE_SECONDS_HOUR_24;\n      }\n      if (!regex.test(userInput)) {\n        errorMessageToDisplay = strings.invalidInputErrorMessage;\n      }\n      return errorMessageToDisplay;\n    };\n    var key = option === null || option === void 0 ? void 0 : option.key;\n    var updatedUserText = '';\n    var errorMessageToDisplay = '';\n    if (value) {\n      if (allowFreeform && !option) {\n        if (!onFormatDate) {\n          // Validate only if user did not add onFormatDate\n          errorMessageToDisplay = validateUserInput(value);\n        } else {\n          // Use user provided validation if onFormatDate is provided\n          if (onValidateUserInput) {\n            errorMessageToDisplay = onValidateUserInput(value);\n          }\n        }\n      }\n      updatedUserText = value;\n    } else if (option) {\n      updatedUserText = option.text;\n    }\n    if (onChange && !errorMessageToDisplay) {\n      var selectedTime = value || (option === null || option === void 0 ? void 0 : option.text) || '';\n      var date = getDateFromTimeSelection(useHour12, baseDate, selectedTime);\n      onChange(event, date);\n    }\n    setErrorMessage(errorMessageToDisplay);\n    setUserText(updatedUserText);\n    setSelectedKey(key);\n  }, [baseDate, allowFreeform, onChange, onFormatDate, onValidateUserInput, showSeconds, useHour12, strings.invalidInputErrorMessage]);\n  var evaluatePressedKey = function (event) {\n    // eslint-disable-next-line deprecation/deprecation\n    var charCode = event.charCode;\n    if (!onFormatDate &&\n    // Only permit input of digits, space, colon, A/P/M characters\n    !(charCode >= KeyCodes.zero && charCode <= KeyCodes.colon || charCode === KeyCodes.space || charCode === KeyCodes.a || charCode === KeyCodes.m || charCode === KeyCodes.p)) {\n      event.preventDefault();\n    }\n  };\n  return React.createElement(ComboBox, __assign({}, rest, {\n    allowFreeform: allowFreeform,\n    selectedKey: selectedKey,\n    label: label,\n    errorMessage: errorMessage,\n    options: timePickerOptions,\n    onChange: onInputChange,\n    text: userText,\n    //eslint-disable-next-line\n    onKeyPress: evaluatePressedKey\n  }));\n};\nTimePicker.displayName = 'TimePicker';\nvar clampTimeRange = function (timeRange) {\n  return {\n    start: Math.min(Math.max(timeRange.start, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n    end: Math.min(Math.max(timeRange.end, TIME_LOWER_BOUND), TIME_UPPER_BOUND)\n  };\n};\nvar generateBaseDate = function (increments, timeRange, baseDate) {\n  if (timeRange) {\n    var clampedTimeRange = clampTimeRange(timeRange);\n    baseDate.setHours(clampedTimeRange.start);\n  }\n  return ceilMinuteToIncrement(baseDate, increments);\n};\nvar getDropdownOptionsCount = function (increments, timeRange) {\n  var hoursInRange = TimeConstants.HoursInOneDay;\n  if (timeRange) {\n    var clampedTimeRange = clampTimeRange(timeRange);\n    if (clampedTimeRange.start > clampedTimeRange.end) {\n      hoursInRange = TimeConstants.HoursInOneDay - timeRange.start - timeRange.end;\n    } else if (timeRange.end > timeRange.start) {\n      hoursInRange = timeRange.end - timeRange.start;\n    }\n  }\n  return Math.floor(TimeConstants.MinutesInOneHour * hoursInRange / increments);\n};","map":{"version":3,"names":["React","useConst","KeyCodes","TimeConstants","addMinutes","formatTimeString","ceilMinuteToIncrement","getDateFromTimeSelection","ComboBox","REGEX_SHOW_SECONDS_HOUR_12","REGEX_HIDE_SECONDS_HOUR_12","REGEX_SHOW_SECONDS_HOUR_24","REGEX_HIDE_SECONDS_HOUR_24","TIME_LOWER_BOUND","TIME_UPPER_BOUND","getDefaultStrings","useHour12","showSeconds","hourUnits","timeFormat","errorMessageToDisplay","invalidInputErrorMessage","TimePicker","_a","label","_b","increments","_c","_d","allowFreeform","_e","timeRange","_f","strings","defaultValue","onChange","onFormatDate","onValidateUserInput","rest","__rest","_g","useState","userText","setUserText","_h","errorMessage","setErrorMessage","optionsCount","getDropdownOptionsCount","initialValue","Date","baseDate","useMemo","generateBaseDate","timePickerOptions","optionsList","Array","i","map","_","index","option","setSeconds","optionText","key","text","_j","selectedKey","setSelectedKey","onInputChange","useCallback","event","value","validateUserInput","userInput","regex","test","updatedUserText","selectedTime","date","evaluatePressedKey","charCode","zero","colon","space","a","m","p","preventDefault","createElement","__assign","options","onKeyPress","displayName","clampTimeRange","start","Math","min","max","end","clampedTimeRange","setHours","hoursInRange","HoursInOneDay","floor","MinutesInOneHour"],"sources":["E:\\SpringProjects\\Frontend\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\TimePicker\\TimePicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useConst } from '@fluentui/react-hooks';\nimport { KeyCodes } from '../../Utilities';\nimport {\n  TimeConstants,\n  addMinutes,\n  formatTimeString,\n  ceilMinuteToIncrement,\n  getDateFromTimeSelection,\n} from '@fluentui/date-time-utilities';\nimport { ComboBox } from '../../ComboBox';\nimport type { IComboBox, IComboBoxOption } from '../../ComboBox';\nimport type { ITimePickerProps, ITimeRange, ITimePickerStrings } from './TimePicker.types';\n\nconst REGEX_SHOW_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):([0-5][0-9]):([0-5][0-9])\\s([AaPp][Mm]))$/;\nconst REGEX_HIDE_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):[0-5][0-9]\\s([AaPp][Mm]))$/;\nconst REGEX_SHOW_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/;\nconst REGEX_HIDE_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n\nconst TIME_LOWER_BOUND = 0;\nconst TIME_UPPER_BOUND = 23;\n\nconst getDefaultStrings = (useHour12: boolean, showSeconds: boolean): ITimePickerStrings => {\n  const hourUnits = useHour12 ? '12-hour' : '24-hour';\n  const timeFormat = `hh:mm${showSeconds ? ':ss' : ''}${useHour12 ? ' AP' : ''}`;\n  const errorMessageToDisplay = `Enter a valid time in the ${hourUnits} format: ${timeFormat}`;\n\n  return {\n    invalidInputErrorMessage: errorMessageToDisplay,\n  };\n};\n\n/**\n * {@docCategory TimePicker}\n */\nexport const TimePicker: React.FunctionComponent<ITimePickerProps> = ({\n  label,\n  increments = 30,\n  showSeconds = false,\n  allowFreeform = true,\n  useHour12 = false,\n  timeRange,\n  strings = getDefaultStrings(useHour12, showSeconds),\n  defaultValue,\n  onChange,\n  onFormatDate,\n  onValidateUserInput,\n  ...rest\n}: ITimePickerProps) => {\n  const [userText, setUserText] = React.useState<string>('');\n  const [errorMessage, setErrorMessage] = React.useState<string>('');\n\n  const optionsCount = getDropdownOptionsCount(increments, timeRange);\n\n  const initialValue = useConst(defaultValue || new Date());\n  const baseDate: Date = React.useMemo(() => generateBaseDate(increments, timeRange, initialValue), [\n    increments,\n    timeRange,\n    initialValue,\n  ]);\n\n  const timePickerOptions: IComboBoxOption[] = React.useMemo(() => {\n    const optionsList = Array(optionsCount);\n    for (let i = 0; i < optionsCount; i++) {\n      optionsList[i] = 0;\n    }\n\n    return optionsList.map((_, index) => {\n      const option = addMinutes(baseDate, increments * index);\n      option.setSeconds(0);\n      const optionText = onFormatDate ? onFormatDate(option) : formatTimeString(option, showSeconds, useHour12);\n      return {\n        key: optionText,\n        text: optionText,\n      };\n    });\n  }, [baseDate, increments, optionsCount, showSeconds, onFormatDate, useHour12]);\n\n  const [selectedKey, setSelectedKey] = React.useState<string | number | undefined>(timePickerOptions[0].key);\n\n  const onInputChange = React.useCallback(\n    (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string): void => {\n      const validateUserInput = (userInput: string): string => {\n        let errorMessageToDisplay = '';\n        let regex: RegExp;\n        if (useHour12) {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_12 : REGEX_HIDE_SECONDS_HOUR_12;\n        } else {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_24 : REGEX_HIDE_SECONDS_HOUR_24;\n        }\n        if (!regex.test(userInput)) {\n          errorMessageToDisplay = strings.invalidInputErrorMessage;\n        }\n        return errorMessageToDisplay;\n      };\n\n      const key = option?.key;\n      let updatedUserText = '';\n      let errorMessageToDisplay = '';\n      if (value) {\n        if (allowFreeform && !option) {\n          if (!onFormatDate) {\n            // Validate only if user did not add onFormatDate\n            errorMessageToDisplay = validateUserInput(value);\n          } else {\n            // Use user provided validation if onFormatDate is provided\n            if (onValidateUserInput) {\n              errorMessageToDisplay = onValidateUserInput(value);\n            }\n          }\n        }\n        updatedUserText = value;\n      } else if (option) {\n        updatedUserText = option.text;\n      }\n\n      if (onChange && !errorMessageToDisplay) {\n        const selectedTime = value || option?.text || '';\n        const date = getDateFromTimeSelection(useHour12, baseDate, selectedTime);\n        onChange(event, date);\n      }\n\n      setErrorMessage(errorMessageToDisplay);\n      setUserText(updatedUserText);\n      setSelectedKey(key);\n    },\n    [\n      baseDate,\n      allowFreeform,\n      onChange,\n      onFormatDate,\n      onValidateUserInput,\n      showSeconds,\n      useHour12,\n      strings.invalidInputErrorMessage,\n    ],\n  );\n\n  const evaluatePressedKey = (event: React.KeyboardEvent<IComboBox>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const charCode = event.charCode;\n    if (\n      !onFormatDate &&\n      // Only permit input of digits, space, colon, A/P/M characters\n      !(\n        (charCode >= KeyCodes.zero && charCode <= KeyCodes.colon) ||\n        charCode === KeyCodes.space ||\n        charCode === KeyCodes.a ||\n        charCode === KeyCodes.m ||\n        charCode === KeyCodes.p\n      )\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  return (\n    <ComboBox\n      {...rest}\n      allowFreeform={allowFreeform}\n      selectedKey={selectedKey}\n      label={label}\n      errorMessage={errorMessage}\n      options={timePickerOptions}\n      onChange={onInputChange}\n      text={userText}\n      //eslint-disable-next-line\n      onKeyPress={evaluatePressedKey}\n    />\n  );\n};\nTimePicker.displayName = 'TimePicker';\n\nconst clampTimeRange = (timeRange: ITimeRange): ITimeRange => {\n  return {\n    start: Math.min(Math.max(timeRange.start, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n    end: Math.min(Math.max(timeRange.end, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n  };\n};\n\nconst generateBaseDate = (increments: number, timeRange: ITimeRange | undefined, baseDate: Date) => {\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    baseDate.setHours(clampedTimeRange.start);\n  }\n\n  return ceilMinuteToIncrement(baseDate, increments);\n};\n\nconst getDropdownOptionsCount = (increments: number, timeRange: ITimeRange | undefined) => {\n  let hoursInRange = TimeConstants.HoursInOneDay;\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    if (clampedTimeRange.start > clampedTimeRange.end) {\n      hoursInRange = TimeConstants.HoursInOneDay - timeRange.start - timeRange.end;\n    } else if (timeRange.end > timeRange.start) {\n      hoursInRange = timeRange.end - timeRange.start;\n    }\n  }\n  return Math.floor((TimeConstants.MinutesInOneHour * hoursInRange) / increments);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
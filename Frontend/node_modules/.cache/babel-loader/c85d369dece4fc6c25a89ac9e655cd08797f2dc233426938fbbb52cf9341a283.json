{"ast":null,"code":"import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\nimport { isDirectionalKeyCode } from './keyboard';\nimport { setFocusVisibility } from './setFocusVisibility';\nvar mountCounters = new WeakMap();\nvar callbackMap = new WeakMap();\nfunction setMountCounters(key, delta) {\n  var newValue;\n  var currValue = mountCounters.get(key);\n  if (currValue) {\n    newValue = currValue + delta;\n  } else {\n    newValue = 1;\n  }\n  mountCounters.set(key, newValue);\n  return newValue;\n}\nfunction setCallbackMap(context) {\n  var callbacks = callbackMap.get(context);\n  if (callbacks) {\n    return callbacks;\n  }\n  var onMouseDown = function (ev) {\n    return _onMouseDown(ev, context.registeredProviders);\n  };\n  var onPointerDown = function (ev) {\n    return _onPointerDown(ev, context.registeredProviders);\n  };\n  var onKeyDown = function (ev) {\n    return _onKeyDown(ev, context.registeredProviders);\n  };\n  var onKeyUp = function (ev) {\n    return _onKeyUp(ev, context.registeredProviders);\n  };\n  callbacks = {\n    onMouseDown: onMouseDown,\n    onPointerDown: onPointerDown,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp\n  };\n  callbackMap.set(context, callbacks);\n  return callbacks;\n}\nexport var FocusRectsContext = React.createContext(undefined);\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown, keyup, mousedown and pointerdown events. (It will only do it once for the current element of\n *    the FocusRectsContext providerRef or once per window if no such element is provided via context, so it's safe to\n *    call this method multiple times.)\n * 2. When the user presses triggers a keydown or keyup event via directional keyboard keys, adds the\n *    'ms-Fabric--isFocusVisible' classname to the current element of the FocusRectsContext providerRef or the document\n *    body if no such element is provided via context, and removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user triggers a mousedown or pointerdown event, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    current element of the FocusRectsContext providerRef or the document body if no such element is provided via\n *    context, and removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param rootRef - A Ref object. Focus rectangle can be applied on itself and all its children.\n */\nexport function useFocusRects(rootRef) {\n  var context = React.useContext(FocusRectsContext);\n  React.useEffect(function () {\n    var _a, _b;\n    var win = getWindow(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current);\n    if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {\n      return undefined;\n    }\n    var el = win;\n    var onMouseDown;\n    var onPointerDown;\n    var onKeyDown;\n    var onKeyUp;\n    if ((_b = context === null || context === void 0 ? void 0 : context.providerRef) === null || _b === void 0 ? void 0 : _b.current) {\n      el = context.providerRef.current;\n      var callbacks = setCallbackMap(context);\n      onMouseDown = callbacks.onMouseDown;\n      onPointerDown = callbacks.onPointerDown;\n      onKeyDown = callbacks.onKeyDown;\n      onKeyUp = callbacks.onKeyUp;\n    } else {\n      onMouseDown = _onMouseDown;\n      onPointerDown = _onPointerDown;\n      onKeyDown = _onKeyDown;\n      onKeyUp = _onKeyUp;\n    }\n    var count = setMountCounters(el, 1);\n    if (count <= 1) {\n      el.addEventListener('mousedown', onMouseDown, true);\n      el.addEventListener('pointerdown', onPointerDown, true);\n      el.addEventListener('keydown', onKeyDown, true);\n      el.addEventListener('keyup', onKeyUp, true);\n    }\n    return function () {\n      var _a;\n      if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {\n        return;\n      }\n      count = setMountCounters(el, -1);\n      if (count === 0) {\n        el.removeEventListener('mousedown', onMouseDown, true);\n        el.removeEventListener('pointerdown', onPointerDown, true);\n        el.removeEventListener('keydown', onKeyDown, true);\n        el.removeEventListener('keyup', onKeyUp, true);\n      }\n    };\n  }, [context, rootRef]);\n}\n/**\n * Function Component wrapper which enables calling `useFocusRects` hook.\n * Renders nothing.\n */\nexport var FocusRects = function (props) {\n  useFocusRects(props.rootRef);\n  return null;\n};\nfunction _onMouseDown(ev, registeredProviders) {\n  setFocusVisibility(false, ev.target, registeredProviders);\n}\nfunction _onPointerDown(ev, registeredProviders) {\n  if (ev.pointerType !== 'mouse') {\n    setFocusVisibility(false, ev.target, registeredProviders);\n  }\n}\n// You need both a keydown and a keyup listener that sets focus visibility to true to handle two distinct scenarios when\n// attaching the listeners and classnames to the provider instead of the document body.\n// If you only have a keydown listener, then the focus rectangles will not show when moving from outside of the provider\n// to inside it. That is why a keyup listener is needed, since it will always trigger after the focus event is fired.\n// If you only have a keyup listener, then the focus rectangles will not show moving between different tabbable elements\n// if the tab key is pressed without being released. That's is why we need a keydown listener, since it will trigger for\n// every element that is being tabbed into.\n// This works because `classList.add` is smart and will not duplicate a classname that already exists on the classList\n// when focus visibility is turned on.\nfunction _onKeyDown(ev, registeredProviders) {\n  // eslint-disable-next-line deprecation/deprecation\n  if (isDirectionalKeyCode(ev.which)) {\n    setFocusVisibility(true, ev.target, registeredProviders);\n  }\n}\nfunction _onKeyUp(ev, registeredProviders) {\n  // eslint-disable-next-line deprecation/deprecation\n  if (isDirectionalKeyCode(ev.which)) {\n    setFocusVisibility(true, ev.target, registeredProviders);\n  }\n}","map":{"version":3,"names":["React","getWindow","isDirectionalKeyCode","setFocusVisibility","mountCounters","WeakMap","callbackMap","setMountCounters","key","delta","newValue","currValue","get","set","setCallbackMap","context","callbacks","onMouseDown","ev","_onMouseDown","registeredProviders","onPointerDown","_onPointerDown","onKeyDown","_onKeyDown","onKeyUp","_onKeyUp","FocusRectsContext","createContext","undefined","useFocusRects","rootRef","useContext","useEffect","win","current","_a","FabricConfig","disableFocusRects","el","_b","providerRef","count","addEventListener","removeEventListener","FocusRects","props","target","pointerType","which"],"sources":["E:\\SpringProjects\\Frontend\\frontend\\node_modules\\@fluentui\\utilities\\src\\useFocusRects.ts"],"sourcesContent":["import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\nimport { isDirectionalKeyCode } from './keyboard';\nimport { setFocusVisibility } from './setFocusVisibility';\n\n/**\n * Counter for mounted component that uses focus rectangles.\n * We want to cleanup the listeners before the last component that uses focus rectangles unmounts.\n */\nexport type ListenerCallbacks = {\n  onMouseDown: (ev: MouseEvent) => void;\n  onPointerDown: (ev: PointerEvent) => void;\n  onKeyDown: (ev: KeyboardEvent) => void;\n  onKeyUp: (ev: KeyboardEvent) => void;\n};\nlet mountCounters = new WeakMap<Window | HTMLElement, number>();\nlet callbackMap = new WeakMap<IFocusRectsContext, ListenerCallbacks>();\n\nfunction setMountCounters(key: Window | HTMLElement, delta: number): number {\n  let newValue;\n  const currValue = mountCounters.get(key);\n  if (currValue) {\n    newValue = currValue + delta;\n  } else {\n    newValue = 1;\n  }\n\n  mountCounters.set(key, newValue);\n  return newValue;\n}\n\nfunction setCallbackMap(context: IFocusRectsContext): ListenerCallbacks {\n  let callbacks = callbackMap.get(context);\n  if (callbacks) {\n    return callbacks;\n  }\n\n  const onMouseDown = (ev: MouseEvent) => _onMouseDown(ev, context.registeredProviders);\n  const onPointerDown = (ev: PointerEvent) => _onPointerDown(ev, context.registeredProviders);\n  const onKeyDown = (ev: KeyboardEvent) => _onKeyDown(ev, context.registeredProviders);\n  const onKeyUp = (ev: KeyboardEvent) => _onKeyUp(ev, context.registeredProviders);\n  callbacks = { onMouseDown, onPointerDown, onKeyDown, onKeyUp };\n\n  callbackMap.set(context, callbacks);\n  return callbacks;\n}\n\ntype AppWindow = (Window & { FabricConfig?: { disableFocusRects?: boolean } }) | undefined;\n\nexport type IFocusRectsContext = {\n  /**\n   * Ref to the root element of the provider\n   */\n  readonly providerRef: React.RefObject<HTMLElement>;\n\n  /**\n   * Array of this and all child provider elements under this one in the React tree.\n   *\n   * Tracking all child providers will allow a focus event in the parent to also set focus styling in its descendants.\n   * This is needed for Combobox, for example, because the focus events happen on the parent context, but the visual\n   * focus indicator is in the combobox callout. The callout needs to be notified on focus events from the parent.\n   */\n  readonly registeredProviders: React.RefObject<HTMLElement>[];\n\n  /**\n   * Used by child FocusRectsProviders to register their element with the parent provider.\n   */\n  readonly registerProvider: (ref: React.RefObject<HTMLElement>) => void;\n\n  /**\n   * Used by child FocusRectsProviders to unregister their element from the parent provider.\n   */\n  readonly unregisterProvider: (ref: React.RefObject<HTMLElement>) => void;\n};\n\nexport const FocusRectsContext = React.createContext<IFocusRectsContext | undefined>(undefined);\n\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown, keyup, mousedown and pointerdown events. (It will only do it once for the current element of\n *    the FocusRectsContext providerRef or once per window if no such element is provided via context, so it's safe to\n *    call this method multiple times.)\n * 2. When the user presses triggers a keydown or keyup event via directional keyboard keys, adds the\n *    'ms-Fabric--isFocusVisible' classname to the current element of the FocusRectsContext providerRef or the document\n *    body if no such element is provided via context, and removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user triggers a mousedown or pointerdown event, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    current element of the FocusRectsContext providerRef or the document body if no such element is provided via\n *    context, and removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param rootRef - A Ref object. Focus rectangle can be applied on itself and all its children.\n */\nexport function useFocusRects(rootRef?: React.RefObject<HTMLElement>): void {\n  const context = React.useContext(FocusRectsContext);\n\n  React.useEffect(() => {\n    const win = getWindow(rootRef?.current) as AppWindow;\n\n    if (!win || win.FabricConfig?.disableFocusRects === true) {\n      return undefined;\n    }\n\n    let el: Window | HTMLElement = win;\n    let onMouseDown: (ev: MouseEvent) => void;\n    let onPointerDown: (ev: PointerEvent) => void;\n    let onKeyDown: (ev: KeyboardEvent) => void;\n    let onKeyUp: (ev: KeyboardEvent) => void;\n    if (context?.providerRef?.current) {\n      el = context.providerRef.current;\n      const callbacks = setCallbackMap(context);\n      onMouseDown = callbacks.onMouseDown;\n      onPointerDown = callbacks.onPointerDown;\n      onKeyDown = callbacks.onKeyDown;\n      onKeyUp = callbacks.onKeyUp;\n    } else {\n      onMouseDown = _onMouseDown;\n      onPointerDown = _onPointerDown;\n      onKeyDown = _onKeyDown;\n      onKeyUp = _onKeyUp;\n    }\n\n    let count = setMountCounters(el, 1);\n    if (count <= 1) {\n      el.addEventListener('mousedown', onMouseDown, true);\n      el.addEventListener('pointerdown', onPointerDown, true);\n      el.addEventListener('keydown', onKeyDown, true);\n      el.addEventListener('keyup', onKeyUp, true);\n    }\n\n    return () => {\n      if (!win || win.FabricConfig?.disableFocusRects === true) {\n        return;\n      }\n      count = setMountCounters(el, -1);\n      if (count === 0) {\n        el.removeEventListener('mousedown', onMouseDown, true);\n        el.removeEventListener('pointerdown', onPointerDown, true);\n        el.removeEventListener('keydown', onKeyDown, true);\n        el.removeEventListener('keyup', onKeyUp, true);\n      }\n    };\n  }, [context, rootRef]);\n}\n\n/**\n * Function Component wrapper which enables calling `useFocusRects` hook.\n * Renders nothing.\n */\nexport const FocusRects: React.FunctionComponent<{ rootRef?: React.RefObject<HTMLElement> }> = props => {\n  useFocusRects(props.rootRef);\n  return null;\n};\n\nfunction _onMouseDown(ev: MouseEvent, registeredProviders?: React.RefObject<HTMLElement>[]): void {\n  setFocusVisibility(false, ev.target as Element, registeredProviders);\n}\n\nfunction _onPointerDown(ev: PointerEvent, registeredProviders?: React.RefObject<HTMLElement>[]): void {\n  if (ev.pointerType !== 'mouse') {\n    setFocusVisibility(false, ev.target as Element, registeredProviders);\n  }\n}\n\n// You need both a keydown and a keyup listener that sets focus visibility to true to handle two distinct scenarios when\n// attaching the listeners and classnames to the provider instead of the document body.\n// If you only have a keydown listener, then the focus rectangles will not show when moving from outside of the provider\n// to inside it. That is why a keyup listener is needed, since it will always trigger after the focus event is fired.\n// If you only have a keyup listener, then the focus rectangles will not show moving between different tabbable elements\n// if the tab key is pressed without being released. That's is why we need a keydown listener, since it will trigger for\n// every element that is being tabbed into.\n// This works because `classList.add` is smart and will not duplicate a classname that already exists on the classList\n// when focus visibility is turned on.\nfunction _onKeyDown(ev: KeyboardEvent, registeredProviders?: React.RefObject<HTMLElement>[]): void {\n  // eslint-disable-next-line deprecation/deprecation\n  if (isDirectionalKeyCode(ev.which)) {\n    setFocusVisibility(true, ev.target as Element, registeredProviders);\n  }\n}\n\nfunction _onKeyUp(ev: KeyboardEvent, registeredProviders?: React.RefObject<HTMLElement>[]): void {\n  // eslint-disable-next-line deprecation/deprecation\n  if (isDirectionalKeyCode(ev.which)) {\n    setFocusVisibility(true, ev.target as Element, registeredProviders);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
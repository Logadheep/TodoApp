{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, on, initializeComponentRef, KeyCodes, getId } from '../../../Utilities';\n// These imports are separated to help with bundling\nimport { MAX_COLOR_SATURATION, MAX_COLOR_VALUE } from '../../../utilities/color/consts';\nimport { getFullColorString } from '../../../utilities/color/getFullColorString';\nimport { updateSV } from '../../../utilities/color/updateSV';\nimport { clamp } from '../../../utilities/color/clamp';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory ColorPicker}\n */\nvar ColorRectangleBase = /** @class */function (_super) {\n  __extends(ColorRectangleBase, _super);\n  function ColorRectangleBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._disposables = [];\n    _this._root = React.createRef();\n    _this._isAdjustingSaturation = true;\n    _this._descriptionId = getId('ColorRectangle-description');\n    _this._onKeyDown = function (ev) {\n      var color = _this.state.color;\n      var s = color.s,\n        v = color.v;\n      var increment = ev.shiftKey ? 10 : 1;\n      // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n      // and getting all the math and styles flipped correctly is tricky\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.up:\n          {\n            _this._isAdjustingSaturation = false;\n            v += increment; // V = 100 (lightest) is at the top\n            break;\n          }\n        case KeyCodes.down:\n          {\n            _this._isAdjustingSaturation = false;\n            v -= increment; // V = 0 (darkest) is at the bottom\n            break;\n          }\n        case KeyCodes.left:\n          {\n            _this._isAdjustingSaturation = true;\n            s -= increment;\n            break;\n          }\n        case KeyCodes.right:\n          {\n            _this._isAdjustingSaturation = true;\n            s += increment;\n            break;\n          }\n        default:\n          return;\n      }\n      _this._updateColor(ev, updateSV(color, clamp(s, MAX_COLOR_SATURATION), clamp(v, MAX_COLOR_VALUE)));\n    };\n    _this._onMouseDown = function (ev) {\n      _this._disposables.push(on(window, 'mousemove', _this._onMouseMove, true), on(window, 'mouseup', _this._disposeListeners, true));\n      _this._onMouseMove(ev);\n    };\n    _this._onMouseMove = function (ev) {\n      if (!_this._root.current) {\n        return;\n      }\n      // Leaving the following commented code which is sometimes necessary for debugging:\n      // If the primary button (1) isn't pressed, the user is no longer dragging, so turn off\n      // the event handlers and exit.\n      // if (!(ev.buttons & 1)) {\n      //   this._disposeListeners();\n      //   return;\n      // }\n      var newColor = _getNewColor(ev, _this.state.color, _this._root.current);\n      if (newColor) {\n        _this._updateColor(ev, newColor);\n      }\n    };\n    _this._disposeListeners = function () {\n      _this._disposables.forEach(function (dispose) {\n        return dispose();\n      });\n      _this._disposables = [];\n    };\n    initializeComponentRef(_this);\n    _this.state = {\n      color: props.color\n    };\n    return _this;\n  }\n  Object.defineProperty(ColorRectangleBase.prototype, \"color\", {\n    get: function () {\n      return this.state.color;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ColorRectangleBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.color) {\n      this.setState({\n        color: this.props.color\n      });\n    }\n  };\n  ColorRectangleBase.prototype.componentWillUnmount = function () {\n    this._disposeListeners();\n  };\n  ColorRectangleBase.prototype.render = function () {\n    var _a = this.props,\n      minSize = _a.minSize,\n      theme = _a.theme,\n      className = _a.className,\n      styles = _a.styles,\n      ariaValueFormat = _a.ariaValueFormat,\n      ariaLabel = _a.ariaLabel,\n      ariaDescription = _a.ariaDescription;\n    var color = this.state.color;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      minSize: minSize\n    });\n    var valueText = ariaValueFormat.replace('{0}', String(color.s)).replace('{1}', String(color.v));\n    return React.createElement(\"div\", {\n      ref: this._root,\n      tabIndex: 0,\n      className: classNames.root,\n      style: {\n        backgroundColor: getFullColorString(color)\n      },\n      onMouseDown: this._onMouseDown,\n      onKeyDown: this._onKeyDown,\n      role: \"slider\",\n      \"aria-valuetext\": valueText,\n      \"aria-valuenow\": this._isAdjustingSaturation ? color.s : color.v,\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": MAX_COLOR_VALUE,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": this._descriptionId,\n      \"data-is-focusable\": true\n    }, React.createElement(\"div\", {\n      className: classNames.description,\n      id: this._descriptionId\n    }, ariaDescription), React.createElement(\"div\", {\n      className: classNames.light\n    }), React.createElement(\"div\", {\n      className: classNames.dark\n    }), React.createElement(\"div\", {\n      className: classNames.thumb,\n      style: {\n        left: color.s + '%',\n        top: MAX_COLOR_VALUE - color.v + '%',\n        backgroundColor: color.str\n      }\n    }));\n  };\n  ColorRectangleBase.prototype._updateColor = function (ev, color) {\n    var onChange = this.props.onChange;\n    var oldColor = this.state.color;\n    if (color.s === oldColor.s && color.v === oldColor.v) {\n      return; // no change\n    }\n\n    if (onChange) {\n      onChange(ev, color);\n    }\n    if (!ev.defaultPrevented) {\n      this.setState({\n        color: color\n      });\n      ev.preventDefault();\n    }\n  };\n  ColorRectangleBase.defaultProps = {\n    minSize: 220,\n    ariaLabel: 'Saturation and brightness',\n    ariaValueFormat: 'Saturation {0} brightness {1}',\n    ariaDescription: 'Use left and right arrow keys to set saturation. Use up and down arrow keys to set brightness.'\n  };\n  return ColorRectangleBase;\n}(React.Component);\nexport { ColorRectangleBase };\n/**\n * Exported for testing only.\n * @internal\n */\nexport function _getNewColor(ev, prevColor, root) {\n  var rectSize = root.getBoundingClientRect();\n  var sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n  var vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\n  return updateSV(prevColor, clamp(Math.round(sPercentage * MAX_COLOR_SATURATION), MAX_COLOR_SATURATION), clamp(Math.round(MAX_COLOR_VALUE - vPercentage * MAX_COLOR_VALUE), MAX_COLOR_VALUE));\n}","map":{"version":3,"names":["React","classNamesFunction","on","initializeComponentRef","KeyCodes","getId","MAX_COLOR_SATURATION","MAX_COLOR_VALUE","getFullColorString","updateSV","clamp","getClassNames","ColorRectangleBase","_super","__extends","props","_this","call","_disposables","_root","createRef","_isAdjustingSaturation","_descriptionId","_onKeyDown","ev","color","state","s","v","increment","shiftKey","which","up","down","left","right","_updateColor","_onMouseDown","push","window","_onMouseMove","_disposeListeners","current","newColor","_getNewColor","forEach","dispose","Object","defineProperty","prototype","get","componentDidUpdate","prevProps","prevState","setState","componentWillUnmount","render","_a","minSize","theme","className","styles","ariaValueFormat","ariaLabel","ariaDescription","classNames","valueText","replace","String","createElement","ref","tabIndex","root","style","backgroundColor","onMouseDown","onKeyDown","role","description","id","light","dark","thumb","top","str","onChange","oldColor","defaultPrevented","preventDefault","defaultProps","Component","prevColor","rectSize","getBoundingClientRect","sPercentage","clientX","width","vPercentage","clientY","height","Math","round"],"sources":["E:\\SpringProjects\\Frontend\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\ColorPicker\\src\\components\\ColorPicker\\ColorRectangle\\ColorRectangle.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, on, initializeComponentRef, KeyCodes, getId } from '../../../Utilities';\n// These imports are separated to help with bundling\nimport { MAX_COLOR_SATURATION, MAX_COLOR_VALUE } from '../../../utilities/color/consts';\nimport { getFullColorString } from '../../../utilities/color/getFullColorString';\nimport { updateSV } from '../../../utilities/color/updateSV';\nimport { clamp } from '../../../utilities/color/clamp';\nimport type {\n  IColorRectangleProps,\n  IColorRectangleStyleProps,\n  IColorRectangleStyles,\n  IColorRectangle,\n} from './ColorRectangle.types';\nimport type { IColor } from '../../../utilities/color/interfaces';\n\nconst getClassNames = classNamesFunction<IColorRectangleStyleProps, IColorRectangleStyles>();\n\nexport interface IColorRectangleState {\n  color: IColor;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorRectangleBase\n  extends React.Component<IColorRectangleProps, IColorRectangleState>\n  implements IColorRectangle {\n  public static defaultProps: Partial<IColorRectangleProps> = {\n    minSize: 220,\n    ariaLabel: 'Saturation and brightness',\n    ariaValueFormat: 'Saturation {0} brightness {1}',\n    ariaDescription: 'Use left and right arrow keys to set saturation. Use up and down arrow keys to set brightness.',\n  };\n\n  private _disposables: (() => void)[] = [];\n  private _root = React.createRef<HTMLDivElement>();\n  private _isAdjustingSaturation: boolean = true;\n  private _descriptionId = getId('ColorRectangle-description');\n\n  constructor(props: IColorRectangleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = { color: props.color };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  public componentDidUpdate(\n    prevProps: Readonly<IColorRectangleProps>,\n    prevState: Readonly<IColorRectangleState>,\n  ): void {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.color) {\n      this.setState({ color: this.props.color });\n    }\n  }\n\n  public componentWillUnmount() {\n    this._disposeListeners();\n  }\n\n  public render(): JSX.Element {\n    const { minSize, theme, className, styles, ariaValueFormat, ariaLabel, ariaDescription } = this.props;\n    const { color } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      minSize,\n    });\n\n    const valueText = ariaValueFormat!.replace('{0}', String(color.s)).replace('{1}', String(color.v));\n\n    return (\n      <div\n        ref={this._root}\n        tabIndex={0}\n        className={classNames.root}\n        style={{ backgroundColor: getFullColorString(color) }}\n        onMouseDown={this._onMouseDown}\n        onKeyDown={this._onKeyDown}\n        role=\"slider\"\n        // Proper description of the current hue *and* saturation\n        // (screen reader typically chooses this over aria-valuenow)\n        aria-valuetext={valueText}\n        // Narrator reads aria-valuetext first, but it also reads aria-valuenow after a pause, and\n        // per the aria spec this defaults to halfway between min/max (50) if we don't provide it.\n        // So provide the value of the most recently adjusted thing.\n        aria-valuenow={this._isAdjustingSaturation ? color.s : color.v}\n        aria-valuemin={0}\n        aria-valuemax={MAX_COLOR_VALUE}\n        aria-label={ariaLabel}\n        aria-describedby={this._descriptionId}\n        data-is-focusable={true}\n      >\n        <div className={classNames.description} id={this._descriptionId}>\n          {ariaDescription}\n        </div>\n        <div className={classNames.light} />\n        <div className={classNames.dark} />\n        <div\n          className={classNames.thumb}\n          style={{ left: color!.s + '%', top: MAX_COLOR_VALUE - color!.v + '%', backgroundColor: color!.str }}\n        />\n      </div>\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { color } = this.state;\n    let { s, v } = color;\n\n    const increment = ev.shiftKey ? 10 : 1;\n\n    // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n    // and getting all the math and styles flipped correctly is tricky\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.up: {\n        this._isAdjustingSaturation = false;\n        v += increment; // V = 100 (lightest) is at the top\n        break;\n      }\n      case KeyCodes.down: {\n        this._isAdjustingSaturation = false;\n        v -= increment; // V = 0 (darkest) is at the bottom\n        break;\n      }\n      case KeyCodes.left: {\n        this._isAdjustingSaturation = true;\n        s -= increment;\n        break;\n      }\n      case KeyCodes.right: {\n        this._isAdjustingSaturation = true;\n        s += increment;\n        break;\n      }\n      default:\n        return;\n    }\n\n    this._updateColor(ev, updateSV(color, clamp(s, MAX_COLOR_SATURATION), clamp(v, MAX_COLOR_VALUE)));\n  };\n\n  private _updateColor(ev: MouseEvent | KeyboardEvent | React.MouseEvent | React.KeyboardEvent, color: IColor): void {\n    const { onChange } = this.props;\n\n    const oldColor = this.state.color;\n    if (color.s === oldColor.s && color.v === oldColor.v) {\n      return; // no change\n    }\n\n    if (onChange) {\n      onChange(ev as React.MouseEvent | React.KeyboardEvent, color);\n    }\n\n    if (!ev.defaultPrevented) {\n      this.setState({ color });\n      ev.preventDefault();\n    }\n  }\n\n  private _onMouseDown = (ev: React.MouseEvent): void => {\n    this._disposables.push(\n      on(window, 'mousemove', this._onMouseMove as (ev: MouseEvent) => void, true),\n      on(window, 'mouseup', this._disposeListeners, true),\n    );\n\n    this._onMouseMove(ev);\n  };\n\n  private _onMouseMove = (ev: MouseEvent | React.MouseEvent): void => {\n    if (!this._root.current) {\n      return;\n    }\n\n    // Leaving the following commented code which is sometimes necessary for debugging:\n    // If the primary button (1) isn't pressed, the user is no longer dragging, so turn off\n    // the event handlers and exit.\n    // if (!(ev.buttons & 1)) {\n    //   this._disposeListeners();\n    //   return;\n    // }\n\n    const newColor = _getNewColor(ev, this.state.color, this._root.current);\n    if (newColor) {\n      this._updateColor(ev, newColor);\n    }\n  };\n\n  private _disposeListeners = (): void => {\n    this._disposables.forEach(dispose => dispose());\n    this._disposables = [];\n  };\n}\n\n/**\n * Exported for testing only.\n * @internal\n */\nexport function _getNewColor(\n  ev: MouseEvent | React.MouseEvent,\n  prevColor: IColor,\n  root: HTMLElement,\n): IColor | undefined {\n  const rectSize = root.getBoundingClientRect();\n\n  const sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n  const vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\n\n  return updateSV(\n    prevColor,\n    clamp(Math.round(sPercentage * MAX_COLOR_SATURATION), MAX_COLOR_SATURATION),\n    clamp(Math.round(MAX_COLOR_VALUE - vPercentage * MAX_COLOR_VALUE), MAX_COLOR_VALUE),\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}